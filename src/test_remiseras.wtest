import remiseras.*
import clientes.*

describe "Testing de Roxana" {

	test "Precio del viaje para 10 kms a Ludmila" {
		assert.equals(180, roxana.precioViaje(ludmila,10))
	}
	
	test "Precio del viaje para 10 kms a Ana María Econ. Estable" {
		
		assert.equals(300, roxana.precioViaje(anaMaria,10))
	}
	
	test "Precio del viaje para 10 kms a Ana María Econ. Inestable" {
		anaMaria.cambiarSituacionEconomica()
		assert.equals(250, roxana.precioViaje(anaMaria,10))
		
	}
	
	test "Precio del viaje para 10 kms a Teresa" {
		assert.equals(220, roxana.precioViaje(teresa,10))
	}
	
	test "Precio del viaje para 10 kms a Teresa con cambios de 30" {
		teresa.precioPorKm(30)
		assert.equals(300, roxana.precioViaje(teresa,10))
	}
	
}

describe "Testing de Gabriela" {

	test "Precio del viaje para 10 kms a Ludmila" {
		assert.equals(216, gabriela.precioViaje(ludmila,10))
	}
	
	test "Precio del viaje para 10 kms a Ana María Econ. Estable" {
		
		assert.equals(360, gabriela.precioViaje(anaMaria,10))
	}
	
	test "Precio del viaje para 10 kms a Ana María Econ. Inestable" {
		anaMaria.cambiarSituacionEconomica()
		assert.equals(300, gabriela.precioViaje(anaMaria,10))
		
	}
	
	test "Precio del viaje para 10 kms a Teresa" {
		assert.equals(264, gabriela.precioViaje(teresa,10))
	}
	
	test "Precio del viaje para 10 kms a Teresa con cambios de 30" {
		teresa.precioPorKm(30)
		assert.equals(360, gabriela.precioViaje(teresa,10))
	}
	
}

describe "Testing de Juana" {

	test "Precio del viaje para 10 kms a Ludmila" {
		assert.equals(200, juana.precioViaje(ludmila,10))
	}
	
	test "Precio del viaje para 10 kms a Ana María Econ. Estable" {
		
		assert.equals(200, juana.precioViaje(anaMaria,10))
	}
	
	test "Precio del viaje para 10 kms a Ana María Econ. Inestable" {
		anaMaria.cambiarSituacionEconomica()
		assert.equals(200, juana.precioViaje(anaMaria,10))
		
	}
	
	test "Precio del viaje para 10 kms a Teresa" {
		assert.equals(200, juana.precioViaje(teresa,10))
	}
	
	test "Precio del viaje para 10 kms a Teresa con cambios de 30" {
		teresa.precioPorKm(30)
		assert.equals(200, juana.precioViaje(teresa,10))
	}
	
}

describe "Test de Lucia" {
	
	test "No se puede reemplazar a si mismo" {
		assert.throwsExceptionWithMessage(
			"No se puede reemplazar a sí misma",
			{lucia.estaReemplazando(lucia)}
		)
	}
	test "Se puede reemplazar a roxana" {
		assert.doesNotThrowException(
			{lucia.estaReemplazando(roxana)}	
			)
	}
	test "Reemplazo de Roxana" {
		lucia.estaReemplazando(roxana)
		assert.that(lucia.estaReemplazando() == roxana)
	}
}